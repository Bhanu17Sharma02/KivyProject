Metadata-Version: 1.1
Name: datatables
Version: 0.4.9
Summary: Integrates SQLAlchemy with DataTables (framework agnostic)
Home-page: https://github.com/orf/datatables/
Author: Tom
Author-email: tom@tomforb.es
License: MIT
Description: ===============================================
        datatables |PyPi Version| |TravisCI| |Coverage|
        ===============================================
        
        .. |PyPi Version| image:: http://img.shields.io/pypi/v/datatables.svg?style=flat
            :target: https://pypi.python.org/pypi/datatables
        
        .. |TravisCI| image:: https://api.travis-ci.org/orf/datatables.svg
            :target: https://travis-ci.org/orf/datatables
        
        .. |Coverage| image:: https://coveralls.io/repos/orf/datatables/badge.png?branch=master
          :target: https://coveralls.io/r/orf/datatables?branch=master
        
        
        
        
        Installation
        ------------
        
        The package is available on `PyPI <https://pypi.python.org/pypi/datatables>`_ and is tested on Python 2.7 to 3.4
        
        .. code-block:: bash
        
            pip install datatables
        
        Usage
        -----
        
        Using Datatables is simple. Construct a DataTable instance by passing it your request parameters (or another dict-like
        object), your model class, a base query and a set of columns. The columns list can contain simple strings which are
        column names, or tuples containing (datatable_name, model_name), (datatable_name, model_name, filter_function) or
        (datatable_name, filter_function).
        
        Additional data such as hyperlinks can be added via DataTable.add_data, which accepts a callable that is called for
        each instance. Check out the usage example below for more info.
        
        
        Example
        -------
        
        **models.py**
        
        .. code-block:: python
        
            class User(Base):
                __tablename__ = 'users'
        
                id          = Column(Integer, primary_key=True)
                full_name   = Column(Text)
                created_at  = Column(DateTime, default=datetime.datetime.utcnow)
        
                # Use lazy=joined to prevent O(N) queries
                address     = relationship("Address", uselist=False, backref="user", lazy="joined")
        
            class Address(Base):
                __tablename__ = 'addresses'
        
                id          = Column(Integer, primary_key=True)
                description = Column(Text, unique=True)
                user_id     = Column(Integer, ForeignKey('users.id'))
        
        **views.py**
        
        .. code-block:: python
        
            @view_config(route_name="data", request_method="GET", renderer="json")
            def users_data(request):
                # User.query = session.query(User)
                table = DataTable(request.GET, User, User.query, [
                    "id",
                    ("name", "full_name", lambda i: "User: {}".format(i.full_name)),
                    ("address", "address.description"),
                ])
                table.add_data(link=lambda o: request.route_url("view_user", id=o.id))
                table.searchable(lambda queryset, user_input: perform_some_search(queryset, user_input))
        
                return table.json()
        
        **template.jinja2**
        
        .. code-block:: html
        
            <table class="table" id="clients_list">
                <thead>
                    <tr>
                        <th>Id</th>
                        <th>User name</th>
                        <th>Address</th>
                    </tr>
                </thead>
                <tbody>
                </tbody>
            </table>
        
            <script>
                $("#clients_list").dataTable({
                    serverSide: true,
                    processing: true,
                    ajax: "{{ request.route_url("data") }}",
                    columns: [
                        {
                            data: "id",
                            "render": function(data, type, row){
                                return $("<div>").append($("<a/>").attr("href", row.DT_RowData.link).text(data)).html();
                            }
                        },
                        { data: "name" },
                        { data: "address" }
                    ]
            </script>
Keywords: sqlalchemy datatables jquery pyramid flask
Platform: UNKNOWN
Classifier: Environment :: Web Environment
Classifier: Framework :: Pyramid
Classifier: Framework :: Flask
Classifier: Framework :: Django
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 2
Classifier: Programming Language :: Python :: 2.7
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.2
Classifier: Programming Language :: Python :: 3.3
Classifier: Topic :: Internet :: WWW/HTTP
Classifier: Topic :: Software Development :: Libraries
Classifier: Topic :: Software Development :: Libraries :: Python Modules
